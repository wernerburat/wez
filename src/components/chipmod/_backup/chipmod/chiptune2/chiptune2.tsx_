const OPENMPT_MODULE_RENDER_STEREOSEPARATION_PERCENT = 2;
const OPENMPT_MODULE_RENDER_INTERPOLATIONFILTER_LENGTH = 3;

// config
export class ChiptuneJsConfig {
  repeatCount: number;
  stereoSeparation: number;
  interpolationFilter: number;
  context: AudioContext;

  constructor(
    repeatCount: number,
    stereoSeparation: number,
    interpolationFilter: number,
    context: AudioContext,
  ) {
    this.repeatCount = repeatCount;
    this.stereoSeparation = stereoSeparation;
    this.interpolationFilter = interpolationFilter;
    this.context = context;
  }
}

export class ChiptuneJsPlayer {
  config: ChiptuneJsConfig;
  context: AudioContext;
  currentPlayingNode: AudioBufferSourceNode | null;
  handlers: Array<{ eventName: string; handler: Function }>;
  touchLocked: boolean;

  constructor(config: ChiptuneJsConfig) {
    this.config = config;
    this.context = config.context;
    this.currentPlayingNode = null;
    this.handlers = [];
    this.touchLocked = true;
  }

  // Fires a specified event
  fireEvent(eventName: string, response: any) {
    this.handlers.forEach((handler) => {
      if (handler.eventName === eventName) {
        handler.handler(response);
      }
    });
  }

  // Adds an event handler
  addHandler(eventName: string, handler: Function) {
    this.handlers.push({ eventName, handler });
  }

  // Helper method to add "onEnded" event handler
  onEnded(handler: Function) {
    this.addHandler("onEnded", handler);
  }

  // Helper method to add "onError" event handler
  onError(handler: Function) {
    this.addHandler("onError", handler);
  }

  // Metadata
  // Returns the duration of the current track
  duration(): number {
    return libopenmpt._openmpt_module_get_duration_seconds(
      this.currentPlayingNode!.modulePtr,
    );
  }

  // Returns the current row being played
  getCurrentRow(): number {
    return libopenmpt._openmpt_module_get_current_row(
      this.currentPlayingNode!.modulePtr,
    );
  }

  // Returns the current pattern being played
  getCurrentPattern(): number {
    return libopenmpt._openmpt_module_get_current_pattern(
      this.currentPlayingNode!.modulePtr,
    );
  }

  // Returns the current order being played
  getCurrentOrder(): number {
    return libopenmpt._openmpt_module_get_current_order(
      this.currentPlayingNode!.modulePtr,
    );
  }

  // Returns the current playtime in seconds
  getCurrentTime(): number {
    return libopenmpt._openmpt_module_get_position_seconds(
      this.currentPlayingNode!.modulePtr,
    );
  }

  // Returns the total order count of the module
  getTotalOrder(): number {
    return libopenmpt._openmpt_module_get_num_orders(
      this.currentPlayingNode!.modulePtr,
    );
  }

  // Returns the total pattern count of the module
  getTotalPatterns(): number {
    return libopenmpt._openmpt_module_get_num_patterns(
      this.currentPlayingNode!.modulePtr,
    );
  }
}
